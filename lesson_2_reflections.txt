- What happens when you initialize a repository? Why do you need to do it?

You creat a .git file that is hidden, but will begin tracking commits of files added to it. It needs to be done in order for commits and other Git functions to work.

- How is the staging area different from the working directory and the repository? What value do you think it offers?

The working directory & the repository are both finalized locations, the staging area is a good place to see which files you might want to add or drop from the commit before making the commit.

- How can you use the staging area to make sure you have one commit per logical change?

You can view which files are ready to be added to the commit and which files are not. You can also drop any files that are not part of the logical change.

- What are some situations when branches would be helpful in keeping your history oganized? How would branches help?

Branches come in handy if you want to test out something completely new or creat a new version of the game for say a different language or difficulty mode.

- How do the diagrams help you visualize the brance structure?

You can layout the entire branching system like a subway map. Making it very easy to understand.

- What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Finally got everything to merge, continued on with the lesson and it was brought to my attention how to fix the merging conflict. The result of merging the branches together gave me one branch to work off of with everyhing updated from the coins & easy-mode branches. Visually it can get confusing on where everything is branching from and too, so representing it in a diagram is an easy way to visually digest what is going on.

- What are the pros and cons of Git's automatic merging vs. always doing merges manually?

Automatic mergeing is a time saver, but Git can only do it's best figuring out what to and when to merge. Always doing it manually gaurantees you know when & what is being merged.